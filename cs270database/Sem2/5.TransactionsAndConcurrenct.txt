4th March 2014: 
--------------
Trasactions and Concurrency by Edel
------------
- Transactions have steps.
- to presever transation integrity, the DBMS must recognize transaction boundaries, the logical beginning and the end of each transaction
- Transactions are atomic.
- Acid properties: 
	- Atomicity: Indivisible unit of work, it is either performed in its entirety or is not performed at all. 
	- Consistency: Database goes from one consistent state to another (fair reality model) 
	- Isolation: Partial effect of 1 transaction invisible to other transactions. Overall, effect is as if transactionswere executed sequentially 
	- Durability: Effects of a successful transaction are permanently recorded in the database
Transaction Boundaries in SQL:
	- SQL statement marks the beginning of a transaction 
	- Commit/ Roll Back mark the end of a transaction 
	- Commit = successful tranaction. 
	- Rollback = undoes the effects of a transaction.
	- The pint in which a transaction is commited or rolled back is called the commit point 
	- Next statement after the commit or rollback starts a new transaction.
Concurrency Control:
	- Avoid undesirable interactions between transactions 
	- preserve ACID properties 
	- No incomplete transactions, no interference 
	- Effect of executing a collection of transactions concurrently is the same as if the transactions were 1 by 1 in some order = serializability. 
	- Responsibility of DBMS.
- Lost update: when a DBMS doesn't do its job properly and the concurrency problem has an issue resulting in an update which hasn't been processed.
Locking: 
	- datat is locked when a transaction begins and realeased when the transaction is commited or rolled back 
	- Lock Level: Database, table, tuple, attribute: SQLlite is an example of the whole DB.
	- Lock mode: Shared Read access only, exclusive. 
	Problems: 
	       - Deadlock: Neither transaction can progress because the other transaction has something the other transaction has got.
		- Starvation: Transaction never gets a look in. Round-robin approach, priority queue.
	Dealing with dead lock: 
		- prevention 
		- detection and resolution. 
Time Stamping: 
	- generated by a system clock time 
	- each transaction is stamped with its start time
	- each item s stamped with the times of the transaction that was last read/written.
	- Run concurrently as if each transaction executed instantaneously at the time indicated bu its timestamp.
	- no transaction is allowed to read a value that was written in its future. 
	- no transaction writes avalue to a data item if the old value of data item is read int he transactions future.
Potential Problems with Time stamping: 
	- Excessive Rollback 
	- couldcause more delay than a lockingn system 
	- compare with starvation.
